package idiotlinMaster

import io.ktor.application.Application
import io.ktor.application.call
import io.ktor.application.install
import io.ktor.features.CallLogging
import io.ktor.features.ContentNegotiation
import io.ktor.request.path
import io.ktor.request.receive
import io.ktor.response.respond
import io.ktor.routing.get
import io.ktor.routing.post
import io.ktor.routing.route
import io.ktor.routing.routing
import io.ktor.serialization.serialization
import kotlinx.serialization.Serializable
import org.kodein.di.Kodein
import org.kodein.di.generic.instance
import org.slf4j.event.Level

fun Application.ktor(kodein: Kodein = kodeinConfig()) {
    // configure the JSON marshaller into Ktor
    install(ContentNegotiation) {
        serialization()
    }
    // be a bit more verbose
    install(CallLogging) {
        level = Level.INFO
    }
    // spring talk: get the "bean" from the "application context"
    val service by kodein.instance<Service>()

    // no more annotations, just real (Kotlin idiomatic) code ❤️
    routing {
        route("") {
            get {
                call.respond(service.getAll().map { it.toModelDto() })
            }
            post {
                val dto = call.receive<ModelCreateDto>()
                val model = service.create(dto.toModelCreateRequest())
                call.respond(model.toModelDto())
            }
        }
    }
}

// should be preferrable generated by open API spec
@Serializable
data class ModelDto(
    val id: String,
    val name: String
)

@Serializable
data class ModelCreateDto(
    val name: String
)

private fun ModelCreateDto.toModelCreateRequest() = ModelCreateRequest(
    name = name
)

private fun Model.toModelDto() = ModelDto(
    id = id.toString(),
    name = name
)
